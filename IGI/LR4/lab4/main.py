from task1.task1 import task1
from task2.task2 import task2
from task3.task3 import task3
from task4.task4 import task4
from task5.task5 import task5
from task6.task6 import task6

def repeat_task():
    """
    Функция, которая предлагает запустить программу еще раз или нет
    """
    while True:
        choice = input("Желаете выполнить программу еще раз? 1 - да, иначе - нет: ")
        if choice == "1":
            return True
        else:
            return False

def main():
    while True:
        try:
            choice = int(input("1- Вывести информацию о задаче, 2 - Ввести номер задачи для решения: "))
            if choice == 1:
                numTask = int(input("Введите номер задания(1-6): "))
                if numTask == 1:
                    print('''\nИсходные данные представляют собой словарь. Необходимо поместить их в файл, используя сериализатор. 
Организовать считывание данных, поиск, сортировку в соответствии с индивидуальным заданием. Обязательно использовать классы. 
Реализуйте два варианта: 1)формат файлов CSV; 2)модуль pickle
Реализуйте данные на учеников (фамилия, улица, дом, квартира). Составьте программу, определяющую, сколько учеников живет 
на улице, введенной с клавиатуры, списки учеников, живущих в доме с номером, введенном с клавиатуры.\n''')
                elif numTask == 2:
                    print('''\nCоставить программу для анализа текста. Считать из исходного файла текст. Используя регулярные 
выражения получить искомую информацию (см. условие), вывести ее на экран и сохранить в другой файл. Заархивировать файл с 
результатом с помощью модуля zipfile и обеспечить получение информации о файле в архиве.
Также выполнить общее задание – определить и сохранить в файл с результатами:
– количество предложений в тексте;
– количество предложений в тексте каждого вида отдельно (повествовательные, вопросительные и побудительные);
– среднюю длину предложения в символах (считаются только слова);
– среднюю длину слова в тексте в символах;
– количество смайликов в заданном тексте.
Получить список дат (формат 2007)
Из заданной строки получить список слов, у которых третья с конца буква согласная, а предпоследняя – гласная.
определить количество слов в строке;
найти самое длинное слово и его порядковый номер;
вывести каждое нечетное слово\n''')
                elif numTask == 3:
                    print('''\nВ соответствии с заданием своего варианта доработать программу из ЛР3, использовав класс и обеспечить:
а) определение дополнительных параметров среднее арифметическое элементов последовательности, медиана, мода, дисперсия, СКО последовательности;
б) с помощью библиотеки matplotlib нарисовать графики разных цветов в одной координатной оси:
– график по полученным данным разложения функции в ряд, представленным в таблице,
– график соответствующей функции, представленной с помощью модуля math. Обеспечить отображение координатных осей, легенды, текста и аннотации.
Cохранить графики в файл
Степенное разложение: 1 / x = sum(0, +inf)x^n = 1 + x + x^2 + ..., |x|<1\n''')
                elif numTask == 4:
                    print('''\nРазработать базовые классы и классы наследники.
Программа должна содержать следующие базовые функции:
1) ввод значений параметров пользователем;
2) проверка корректности вводимых данных;
3) построение, закрашивание фигуры в выбранный цвет, введенный с клавиатуры, и подпись фигуры текстом, введенным с клавиатуры;
4) вывод фигуры на экран и в файл.
Вариант задания: построить параллелограмм по сторонам a, b и углу между ними A(в градусах).\n''')
                elif numTask == 5:
                    print('''\nИсследовать возможности библиотека NumPy при работе с массивами и математическими и статическими операциями. Сформировать целочисленную матрицу А[n,m] с помощью генератора случайных чисел (random).
а) Библиотека NumPy.
1. Создание массива. Функции array() и values().
2. Функции создания массива заданного вида.
3. Индексирование массивов NumPy. Индекс и срез.
4. Операции с массивами. Универсальные (поэлементные) функции.
б) Математические и статистические операции.
1. Функция mean()
2. Функция median()
3. Функция corrcoef()
4. Дисперсия var().
5. Стандартное отклонение std()
Определить, сколько элементов среди всех элементов матрицы равны минимальному значению. Вывести их индексы. Вычислить стандартное отклонение для всех значений матрицы. Ответ
округлите до сотых. Вычисление стандартного отклонения выполнить двумя способами: через стандартную функцию и через программирование формулы.\n''')
                elif numTask == 6:
                    print('''\nИспользуя любой из наборов данных (datasets) на ресурсе: https://www.kaggle.com/datasets исследовать основные возможности библиотеки Pandas. См. Анализ Данных Python методичка.pdf
Задание а. Библиотека Pandas. Структуры Series и DataFrame
1. Библиотека Pandas. Импорт библиотеки.
2. Структура Series.
3. Создание Series .
4. Функция display.
5. Доступ к элементам Series с использованием .loc или .iloc.
6. Объект DataFrame. Создание.
Задание б. Основные операции
1. Функция read_csv. Загрузить файл football.csv
2. Получение информации о датафрейме: head и tail
3. Получение информации о датафрейме: info
4. Получение информации о датафрейме: describe
5. Индексация и извлечение данных: статистические методы (во сколько раз среднее значение выбранного показателя с максимальным значением другого параметра выше среднего выбранного показателя с минимальным значением )\n''')
 
                else:
                    print("Введите число от 1 до 6!!!")
                    continue
            elif choice == 2:
                numTask = int(input("Введите номер задания(1-6): "))
                if numTask == 1:
                    task1()
                elif numTask == 2:
                    task2("task2/task2Res.txt")
                elif numTask == 3:
                    task3()
                elif numTask == 4:
                    task4()
                elif numTask == 5:
                    task5()
                elif numTask == 6:
                    task6()
                else:
                    print("Введите число от 1 до 6!!!")
                    continue
            else:
                print("Введите число от 1 до 6!!!")
                continue
            if not repeat_task():
                break
        except ValueError:
            print("Ошибка ввода")
            continue

"""
Выражение __name__ == "__main__" используется для определения того, был ли текущий модуль запущен 
напрямую из командной строки или импортирован как модуль в другой программе.
"""
if __name__ == "__main__":
    main()